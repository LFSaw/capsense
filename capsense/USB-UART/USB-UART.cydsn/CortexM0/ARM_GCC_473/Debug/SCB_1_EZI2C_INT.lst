ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"SCB_1_EZI2C_INT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SCB_1_EZI2C_STRETCH_ISR,"ax",%progbits
  18              		.align	2
  19              		.global	SCB_1_EZI2C_STRETCH_ISR
  20              		.code	16
  21              		.thumb_func
  22              		.type	SCB_1_EZI2C_STRETCH_ISR, %function
  23              	SCB_1_EZI2C_STRETCH_ISR:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\SCB_1_EZI2C_INT.c"
   1:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * File Name: SCB_1_EZI2C_INT.c
   3:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * Version 1.20
   4:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** *
   5:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * Description:
   6:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** *  This file provides the source code to the Interrupt Service Routine for
   7:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** *  the SCB Component in EZI2C mode.
   8:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** *
   9:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * Note:
  10:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** *
  11:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * Copyright 2013-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  18:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** #include "SCB_1_PVT.h"
  19:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** #include "SCB_1_EZI2C_PVT.h"
  20:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  21:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** #if(SCB_1_EZI2C_SCL_STRETCH_ENABLE_CONST)
  22:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     /*******************************************************************************
  23:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     * Function Name: SCB_1_EZI2C_STRETCH_ISR
  24:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     ********************************************************************************
  25:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *
  26:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     * Summary:
  27:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *  Handles the Interrupt Service Routine for the SCB EZI2C mode. The clock stretching is
  28:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *  used during operation.
  29:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *
  30:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     * Parameters:
  31:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *  None
  32:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 2


  33:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     * Return:
  34:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *  None
  35:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *
  36:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     *******************************************************************************/
  37:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     CY_ISR_PROTO(SCB_1_EZI2C_STRETCH_ISR)
  38:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     {
  26              		.loc 1 38 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 88B0     		sub	sp, sp, #32
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 40
  36 0004 00AF     		add	r7, sp, #0
  37              	.LCFI2:
  38              		.cfi_def_cfa_register 7
  39:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         static uint16 locBufSize;
  40:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 locIndex;
  41:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 locStatus;
  42:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  43:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 endTransfer;
  44:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 fifoIndex;
  45:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 locByte;
  46:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  47:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 locIntrCause;
  48:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 locIntrSlave;
  49:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  50:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     #if(SCB_1_SECONDARY_ADDRESS_ENABLE_CONST)
  51:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         /* Variable intended to be used with either buffer */
  52:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         static volatile uint8 * SCB_1_dataBuffer; /* Pointer to data buffer              */
  53:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         static uint16 SCB_1_bufSizeBuf;           /* Size of buffer1 in bytes            */
  54:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         static uint16 SCB_1_protectBuf;           /* Start index of write protected area */
  55:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  56:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         static uint8 activeAddress;
  57:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         uint32 ackResponse;
  58:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  59:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         ackResponse = SCB_1_EZI2C_ACK_RECEIVED_ADDRESS;
  60:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     #endif /* (SCB_1_SECONDARY_ADDRESS_ENABLE_CONST) */
  61:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  62:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     #if !defined (CY_REMOVE_SCB_1_CUSTOM_INTR_HANDLER)
  63:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         if(NULL != SCB_1_customIntrHandler)
  39              		.loc 1 63 0
  40 0006 994B     		ldr	r3, .L40
  41 0008 1B68     		ldr	r3, [r3]
  42 000a 002B     		cmp	r3, #0
  43 000c 02D0     		beq	.L2
  64:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         {
  65:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_customIntrHandler();
  44              		.loc 1 65 0
  45 000e 974B     		ldr	r3, .L40
  46 0010 1B68     		ldr	r3, [r3]
  47 0012 9847     		blx	r3
  48              	.L2:
  66:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         }
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 3


  67:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     #else
  68:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         CY_SCB_1_CUSTOM_INTR_HANDLER();
  69:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     #endif /* !defined (CY_REMOVE_SCB_1_CUSTOM_INTR_HANDLER) */
  70:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  71:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         /* Make local copy of global variable */
  72:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         locIndex = SCB_1_EZI2C_GET_INDEX(activeAddress);
  49              		.loc 1 72 0
  50 0014 964B     		ldr	r3, .L40+4
  51 0016 1B88     		ldrh	r3, [r3]
  52 0018 FB61     		str	r3, [r7, #28]
  73:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  74:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         /* Get interrupt sources */
  75:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         locIntrSlave = SCB_1_GetSlaveInterruptSource();
  53              		.loc 1 75 0
  54 001a 964B     		ldr	r3, .L40+8
  55 001c 1B68     		ldr	r3, [r3]
  56 001e FB60     		str	r3, [r7, #12]
  76:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         locIntrCause = SCB_1_GetInterruptCause();
  57              		.loc 1 76 0
  58 0020 954B     		ldr	r3, .L40+12
  59 0022 1B68     		ldr	r3, [r3]
  60 0024 BB60     		str	r3, [r7, #8]
  77:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  78:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         /* INTR_SLAVE.I2C_ARB_LOST and INTR_SLAVE_I2C.BUS_ERROR */
  79:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         /* Handles errors on the bus. There are cases when both bits are set.
  80:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         * The error recovery is common: re-enable the scb IP. The content of the RX FIFO is lost.
  81:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         */
  82:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         if(0u != (locIntrSlave & (SCB_1_INTR_SLAVE_I2C_ARB_LOST |
  61              		.loc 1 82 0
  62 0026 FA68     		ldr	r2, [r7, #12]
  63 0028 944B     		ldr	r3, .L40+16
  64 002a 1340     		and	r3, r2
  65 002c 56D0     		beq	.L3
  83:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                   SCB_1_INTR_SLAVE_I2C_BUS_ERROR)))
  84:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         {
  85:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_CTRL_REG &= (uint32) ~SCB_1_CTRL_ENABLED; /* Disable SCB block */
  66              		.loc 1 85 0
  67 002e 944B     		ldr	r3, .L40+20
  68 0030 934A     		ldr	r2, .L40+20
  69 0032 1268     		ldr	r2, [r2]
  70 0034 5200     		lsl	r2, r2, #1
  71 0036 5208     		lsr	r2, r2, #1
  72 0038 1A60     		str	r2, [r3]
  86:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  87:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         #if(SCB_1_CY_SCBIP_V0)
  88:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             if(0u != ((uint8) SCB_1_EZI2C_STATUS_BUSY & SCB_1_curStatus))
  73              		.loc 1 88 0
  74 003a 924B     		ldr	r3, .L40+24
  75 003c 1B78     		ldrb	r3, [r3]
  76 003e DAB2     		uxtb	r2, r3
  77 0040 2023     		mov	r3, #32
  78 0042 1340     		and	r3, r2
  79 0044 DBB2     		uxtb	r3, r3
  80 0046 002B     		cmp	r3, #0
  81 0048 2BD0     		beq	.L4
  89:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         #endif /* (SCB_1_CY_SCBIP_V0) */
  90:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             {
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 4


  91:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 SCB_1_curStatus &= (uint8) ~SCB_1_EZI2C_STATUS_BUSY;
  82              		.loc 1 91 0
  83 004a 8E4B     		ldr	r3, .L40+24
  84 004c 1B78     		ldrb	r3, [r3]
  85 004e DBB2     		uxtb	r3, r3
  86 0050 2022     		mov	r2, #32
  87 0052 9343     		bic	r3, r2
  88 0054 DAB2     		uxtb	r2, r3
  89 0056 8B4B     		ldr	r3, .L40+24
  90 0058 1A70     		strb	r2, [r3]
  92:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 SCB_1_curStatus |= (uint8)  SCB_1_EZI2C_STATUS_ERR;
  91              		.loc 1 92 0
  92 005a 8A4B     		ldr	r3, .L40+24
  93 005c 1B78     		ldrb	r3, [r3]
  94 005e DBB2     		uxtb	r3, r3
  95 0060 1022     		mov	r2, #16
  96 0062 1343     		orr	r3, r2
  97 0064 DAB2     		uxtb	r2, r3
  98 0066 874B     		ldr	r3, .L40+24
  99 0068 1A70     		strb	r2, [r3]
  93:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
  94:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* INTR_TX_EMPTY is enabled on address phase to receive data */
  95:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 if(0u == (SCB_1_GetTxInterruptMode() & SCB_1_INTR_TX_EMPTY))
 100              		.loc 1 95 0
 101 006a 874B     		ldr	r3, .L40+28
 102 006c 1A68     		ldr	r2, [r3]
 103 006e 1023     		mov	r3, #16
 104 0070 1340     		and	r3, r2
 105 0072 0ED1     		bne	.L5
  96:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
  97:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Write complete */
  98:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if(SCB_1_indexBuf1 != SCB_1_offsetBuf1)
 106              		.loc 1 98 0
 107 0074 7E4B     		ldr	r3, .L40+4
 108 0076 1A88     		ldrh	r2, [r3]
 109 0078 844B     		ldr	r3, .L40+32
 110 007a 1B88     		ldrh	r3, [r3]
 111 007c 9A42     		cmp	r2, r3
 112 007e 10D0     		beq	.L4
  99:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 100:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_curStatus |= (uint8) SCB_1_INTR_SLAVE_I2C_WRITE_STOP;
 113              		.loc 1 100 0
 114 0080 804B     		ldr	r3, .L40+24
 115 0082 1B78     		ldrb	r3, [r3]
 116 0084 DBB2     		uxtb	r3, r3
 117 0086 0822     		mov	r2, #8
 118 0088 1343     		orr	r3, r2
 119 008a DAB2     		uxtb	r2, r3
 120 008c 7D4B     		ldr	r3, .L40+24
 121 008e 1A70     		strb	r2, [r3]
 122 0090 07E0     		b	.L4
 123              	.L5:
 101:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 102:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 103:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 else
 104:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 105:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Read complete */
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 5


 106:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_curStatus |= (uint8) SCB_1_INTR_SLAVE_I2C_NACK;
 124              		.loc 1 106 0
 125 0092 7C4B     		ldr	r3, .L40+24
 126 0094 1B78     		ldrb	r3, [r3]
 127 0096 DBB2     		uxtb	r3, r3
 128 0098 0222     		mov	r2, #2
 129 009a 1343     		orr	r3, r2
 130 009c DAB2     		uxtb	r2, r3
 131 009e 794B     		ldr	r3, .L40+24
 132 00a0 1A70     		strb	r2, [r3]
 133              	.L4:
 107:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 108:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             }
 109:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 110:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_DISABLE_SLAVE_AUTO_DATA;
 134              		.loc 1 110 0
 135 00a2 7B4B     		ldr	r3, .L40+36
 136 00a4 7A4A     		ldr	r2, .L40+36
 137 00a6 1168     		ldr	r1, [r2]
 138 00a8 7A4A     		ldr	r2, .L40+40
 139 00aa 0A40     		and	r2, r1
 140 00ac 1A60     		str	r2, [r3]
 111:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             
 112:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             /* Disable TX and RX interrupt sources */
 113:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_SetRxInterruptMode(SCB_1_NO_INTR_SOURCES);
 141              		.loc 1 113 0
 142 00ae 7A4B     		ldr	r3, .L40+44
 143 00b0 0022     		mov	r2, #0
 144 00b2 1A60     		str	r2, [r3]
 114:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_SetTxInterruptMode(SCB_1_NO_INTR_SOURCES);
 145              		.loc 1 114 0
 146 00b4 744B     		ldr	r3, .L40+28
 147 00b6 0022     		mov	r2, #0
 148 00b8 1A60     		str	r2, [r3]
 115:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 116:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         #if(SCB_1_CY_SCBIP_V0)
 117:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             /* Clear interrupt sources as they are not automatically cleared after SCB is disabled 
 118:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_ClearRxInterruptSource(SCB_1_INTR_RX_ALL);
 149              		.loc 1 118 0
 150 00ba 784B     		ldr	r3, .L40+48
 151 00bc 784A     		ldr	r2, .L40+52
 152 00be 1A60     		str	r2, [r3]
 119:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_ClearSlaveInterruptSource(SCB_1_INTR_SLAVE_ALL);
 153              		.loc 1 119 0
 154 00c0 6C4B     		ldr	r3, .L40+8
 155 00c2 784A     		ldr	r2, .L40+56
 156 00c4 1A60     		str	r2, [r3]
 120:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         #endif /* (SCB_1_CY_SCBIP_V0) */
 121:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 122:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_fsmState = SCB_1_EZI2C_FSM_IDLE;
 157              		.loc 1 122 0
 158 00c6 784B     		ldr	r3, .L40+60
 159 00c8 0222     		mov	r2, #2
 160 00ca 1A70     		strb	r2, [r3]
 123:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 124:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             SCB_1_CTRL_REG |= (uint32) SCB_1_CTRL_ENABLED;  /* Enable SCB block */
 161              		.loc 1 124 0
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 6


 162 00cc 6C4B     		ldr	r3, .L40+20
 163 00ce 6C4A     		ldr	r2, .L40+20
 164 00d0 1268     		ldr	r2, [r2]
 165 00d2 8021     		mov	r1, #128
 166 00d4 0906     		lsl	r1, r1, #24
 167 00d6 0A43     		orr	r2, r1
 168 00d8 1A60     		str	r2, [r3]
 169 00da ACE1     		b	.L6
 170              	.L3:
 125:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         }
 126:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         else
 127:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         {
 128:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             /* INTR_I2C_EC_WAKE_UP */
 129:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             /* Wakes up device from deep sleep */
 130:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             if(0u != (locIntrCause & SCB_1_INTR_CAUSE_I2C_EC))
 171              		.loc 1 130 0
 172 00dc BA68     		ldr	r2, [r7, #8]
 173 00de 1023     		mov	r3, #16
 174 00e0 1340     		and	r3, r2
 175 00e2 02D0     		beq	.L7
 131:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             {
 132:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Disables wakeup interrupt source but do not clear it. It is cleared in INTR_SLAV
 133:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 SCB_1_SetI2CExtClkInterruptMode(SCB_1_NO_INTR_SOURCES);
 176              		.loc 1 133 0
 177 00e4 714B     		ldr	r3, .L40+64
 178 00e6 0022     		mov	r2, #0
 179 00e8 1A60     		str	r2, [r3]
 180              	.L7:
 134:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             }
 135:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 136:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             if(0u != (locIntrCause & (SCB_1_INTR_CAUSE_RX | SCB_1_INTR_CAUSE_SLAVE)))
 181              		.loc 1 136 0
 182 00ea BA68     		ldr	r2, [r7, #8]
 183 00ec 0A23     		mov	r3, #10
 184 00ee 1340     		and	r3, r2
 185 00f0 00D1     		bne	.LCB148
 186 00f2 0EE1     		b	.L8	@long jump
 187              	.LCB148:
 137:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             {
 138:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* INTR_RX.NOT_EMPTY */
 139:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Receives data byte-by-byte. Do not use RX FIFO capabilities */
 140:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 if (0u != (SCB_1_GetRxInterruptSourceMasked() & SCB_1_INTR_RX_NOT_EMPTY))
 188              		.loc 1 140 0
 189 00f4 6E4B     		ldr	r3, .L40+68
 190 00f6 1A68     		ldr	r2, [r3]
 191 00f8 0423     		mov	r3, #4
 192 00fa 1340     		and	r3, r2
 193 00fc 00D1     		bne	.LCB154
 194 00fe 86E0     		b	.L9	@long jump
 195              	.LCB154:
 141:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 142:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 #if (SCB_1_SECONDARY_ADDRESS_ENABLE_CONST)
 143:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* If I2C_STOP service is delayed to I2C_ADDR_MATCH the address byte is in the 
 144:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     * RX_NOT_EMPTY is enabled. The address byte has to stay into RX FIFO therefore 
 145:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     * RX.NOT_EMPTY service has to be skipped. The address byte has to be read by I2
 146:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     */
 147:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if (0u == (locIntrCause & SCB_1_INTR_CAUSE_SLAVE))
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 7


 148:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 #endif /* (SCB_1_SECONDARY_ADDRESS_ENABLE_CONST) */
 149:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 150:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locByte = SCB_1_RX_FIFO_RD_REG;
 196              		.loc 1 150 0
 197 0100 6C4B     		ldr	r3, .L40+72
 198 0102 1B68     		ldr	r3, [r3]
 199 0104 7B60     		str	r3, [r7, #4]
 151:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 152:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         switch(SCB_1_fsmState)
 200              		.loc 1 152 0
 201 0106 684B     		ldr	r3, .L40+60
 202 0108 1B78     		ldrb	r3, [r3]
 203 010a 012B     		cmp	r3, #1
 204 010c 04D0     		beq	.L12
 205 010e 022B     		cmp	r3, #2
 206 0110 1ED0     		beq	.L13
 207 0112 002B     		cmp	r3, #0
 208 0114 28D0     		beq	.L11
 209 0116 72E0     		b	.L39
 210              	.L12:
 153:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 154:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         case SCB_1_EZI2C_FSM_BYTE_WRITE:
 155:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             if(0u != locBufSize)
 211              		.loc 1 155 0
 212 0118 674B     		ldr	r3, .L40+76
 213 011a 1B88     		ldrh	r3, [r3]
 214 011c 002B     		cmp	r3, #0
 215 011e 13D0     		beq	.L14
 156:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             {
 157:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Store data byte and ACK */
 158:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_I2C_SLAVE_GENERATE_ACK;
 216              		.loc 1 158 0
 217 0120 664B     		ldr	r3, .L40+80
 218 0122 0122     		mov	r2, #1
 219 0124 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 160:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_dataBuffer1[locIndex] = (uint8) locByte;
 220              		.loc 1 160 0
 221 0126 664B     		ldr	r3, .L40+84
 222 0128 1A68     		ldr	r2, [r3]
 223 012a FB69     		ldr	r3, [r7, #28]
 224 012c D318     		add	r3, r2, r3
 225 012e 7A68     		ldr	r2, [r7, #4]
 226 0130 D2B2     		uxtb	r2, r2
 227 0132 1A70     		strb	r2, [r3]
 161:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 locIndex++;
 228              		.loc 1 161 0
 229 0134 FB69     		ldr	r3, [r7, #28]
 230 0136 0133     		add	r3, r3, #1
 231 0138 FB61     		str	r3, [r7, #28]
 162:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 locBufSize--;
 232              		.loc 1 162 0
 233 013a 5F4B     		ldr	r3, .L40+76
 234 013c 1B88     		ldrh	r3, [r3]
 235 013e 013B     		sub	r3, r3, #1
 236 0140 9AB2     		uxth	r2, r3
 237 0142 5D4B     		ldr	r3, .L40+76
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 8


 238 0144 1A80     		strh	r2, [r3]
 163:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             }
 164:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             else
 165:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             {
 166:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Discard data byte and NACK */
 167:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_I2C_SLAVE_GENERATE_NACK;
 168:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             }
 169:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             break;
 239              		.loc 1 169 0
 240 0146 5EE0     		b	.L16
 241              	.L14:
 167:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_I2C_SLAVE_GENERATE_NACK;
 242              		.loc 1 167 0
 243 0148 5C4B     		ldr	r3, .L40+80
 244 014a 0222     		mov	r2, #2
 245 014c 1A60     		str	r2, [r3]
 246              		.loc 1 169 0
 247 014e 5AE0     		b	.L16
 248              	.L13:
 170:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 171:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #if(SCB_1_SUB_ADDRESS_SIZE16_CONST)
 172:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         case SCB_1_EZI2C_FSM_OFFSET_HI8:
 173:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 174:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_I2C_SLAVE_GENERATE_ACK;
 249              		.loc 1 174 0
 250 0150 5A4B     		ldr	r3, .L40+80
 251 0152 0122     		mov	r2, #1
 252 0154 1A60     		str	r2, [r3]
 175:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 176:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Store offset most significant byre */
 177:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             locBufSize = (uint16) ((uint8) locByte);
 253              		.loc 1 177 0
 254 0156 7B68     		ldr	r3, [r7, #4]
 255 0158 DBB2     		uxtb	r3, r3
 256 015a 1A1C     		mov	r2, r3
 257 015c 564B     		ldr	r3, .L40+76
 258 015e 1A80     		strh	r2, [r3]
 178:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 179:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_fsmState = SCB_1_EZI2C_FSM_OFFSET_LO8;
 259              		.loc 1 179 0
 260 0160 514B     		ldr	r3, .L40+60
 261 0162 0022     		mov	r2, #0
 262 0164 1A70     		strb	r2, [r3]
 180:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 181:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             break;
 263              		.loc 1 181 0
 264 0166 4EE0     		b	.L16
 265              	.L11:
 182:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #endif /* (SCB_1_SUB_ADDRESS_SIZE16_CONST) */
 183:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 184:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         case SCB_1_EZI2C_FSM_OFFSET_LO8:
 185:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 186:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             #if(SCB_1_SUB_ADDRESS_SIZE16)
 187:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             {
 188:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Collect 2 bytes offset */
 189:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 locByte = ((uint32) ((uint32) locBufSize << 8u)) | locByte;
 266              		.loc 1 189 0
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 9


 267 0168 534B     		ldr	r3, .L40+76
 268 016a 1B88     		ldrh	r3, [r3]
 269 016c 1B02     		lsl	r3, r3, #8
 270 016e 7A68     		ldr	r2, [r7, #4]
 271 0170 1343     		orr	r3, r2
 272 0172 7B60     		str	r3, [r7, #4]
 190:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             }
 191:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             #endif
 192:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 193:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Check offset against buffer size */
 194:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             if(locByte < (uint32) SCB_1_bufSizeBuf1)
 273              		.loc 1 194 0
 274 0174 534B     		ldr	r3, .L40+88
 275 0176 1B88     		ldrh	r3, [r3]
 276 0178 1A1C     		mov	r2, r3
 277 017a 7B68     		ldr	r3, [r7, #4]
 278 017c 9A42     		cmp	r2, r3
 279 017e 3AD9     		bls	.L17
 195:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             {
 196:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_I2C_SLAVE_GENERATE_ACK;
 280              		.loc 1 196 0
 281 0180 4E4B     		ldr	r3, .L40+80
 282 0182 0122     		mov	r2, #1
 283 0184 1A60     		str	r2, [r3]
 197:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 198:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Update local buffer index with new offset */
 199:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 locIndex = locByte;
 284              		.loc 1 199 0
 285 0186 7B68     		ldr	r3, [r7, #4]
 286 0188 FB61     		str	r3, [r7, #28]
 200:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 201:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Get available buffer size to write */
 202:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 locBufSize = (uint16) ((locByte < SCB_1_protectBuf1) ?
 287              		.loc 1 202 0
 288 018a 4F4B     		ldr	r3, .L40+92
 289 018c 1B88     		ldrh	r3, [r3]
 290 018e 1A1C     		mov	r2, r3
 291 0190 7B68     		ldr	r3, [r7, #4]
 292 0192 9A42     		cmp	r2, r3
 293 0194 06D9     		bls	.L18
 294              		.loc 1 202 0 is_stmt 0 discriminator 1
 295 0196 4C4B     		ldr	r3, .L40+92
 296 0198 1A88     		ldrh	r2, [r3]
 297 019a 7B68     		ldr	r3, [r7, #4]
 298 019c 9BB2     		uxth	r3, r3
 299 019e D31A     		sub	r3, r2, r3
 300 01a0 9BB2     		uxth	r3, r3
 301 01a2 00E0     		b	.L19
 302              	.L18:
 303              		.loc 1 202 0 discriminator 2
 304 01a4 0023     		mov	r3, #0
 305              	.L19:
 306              		.loc 1 202 0 discriminator 3
 307 01a6 444A     		ldr	r2, .L40+76
 308 01a8 1380     		strh	r3, [r2]
 203:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                                        (SCB_1_protectBuf1 - locByte) : (0u));
 204:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 10


 205:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             #if (SCB_1_CY_SCBIP_V0)
 206:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 
 207:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 if(locBufSize < SCB_1_FIFO_SIZE)
 309              		.loc 1 207 0 is_stmt 1 discriminator 3
 310 01aa 434B     		ldr	r3, .L40+76
 311 01ac 1B88     		ldrh	r3, [r3]
 312 01ae 072B     		cmp	r3, #7
 313 01b0 03D8     		bhi	.L20
 208:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 {
 209:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     /* Set FSM state to receive byte by byte */
 210:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     SCB_1_fsmState = SCB_1_EZI2C_FSM_BYTE_WRITE;
 314              		.loc 1 210 0
 315 01b2 3D4B     		ldr	r3, .L40+60
 316 01b4 0122     		mov	r2, #1
 317 01b6 1A70     		strb	r2, [r3]
 318 01b8 18E0     		b	.L21
 319              	.L20:
 211:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 }
 212:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Receive use RX FIFO chunks */
 213:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 else if(locBufSize == SCB_1_FIFO_SIZE)
 320              		.loc 1 213 0
 321 01ba 3F4B     		ldr	r3, .L40+76
 322 01bc 1B88     		ldrh	r3, [r3]
 323 01be 082B     		cmp	r3, #8
 324 01c0 0AD1     		bne	.L22
 214:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 {
 215:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     SCB_1_ENABLE_SLAVE_AUTO_DATA; /* NACK when RX FIFO is full */
 325              		.loc 1 215 0
 326 01c2 334B     		ldr	r3, .L40+36
 327 01c4 324A     		ldr	r2, .L40+36
 328 01c6 1268     		ldr	r2, [r2]
 329 01c8 A021     		mov	r1, #160
 330 01ca 0902     		lsl	r1, r1, #8
 331 01cc 0A43     		orr	r2, r1
 332 01ce 1A60     		str	r2, [r3]
 216:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     SCB_1_SetRxInterruptMode(SCB_1_NO_INTR_SOURCES);
 333              		.loc 1 216 0
 334 01d0 314B     		ldr	r3, .L40+44
 335 01d2 0022     		mov	r2, #0
 336 01d4 1A60     		str	r2, [r3]
 337 01d6 09E0     		b	.L21
 338              	.L22:
 217:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 }
 218:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 else
 219:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 {
 220:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     SCB_1_ENABLE_SLAVE_AUTO_DATA_ACK; /* Stretch when RX FIFO is fu
 339              		.loc 1 220 0
 340 01d8 2D4B     		ldr	r3, .L40+36
 341 01da 2D4A     		ldr	r2, .L40+36
 342 01dc 1268     		ldr	r2, [r2]
 343 01de 8021     		mov	r1, #128
 344 01e0 8901     		lsl	r1, r1, #6
 345 01e2 0A43     		orr	r2, r1
 346 01e4 1A60     		str	r2, [r3]
 221:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     SCB_1_SetRxInterruptMode(SCB_1_INTR_RX_FULL);
 347              		.loc 1 221 0
 348 01e6 2C4B     		ldr	r3, .L40+44
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 11


 349 01e8 0822     		mov	r2, #8
 350 01ea 1A60     		str	r2, [r3]
 351              	.L21:
 222:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 }
 223:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 
 224:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             #else
 225:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 
 226:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 #if(SCB_1_SECONDARY_ADDRESS_ENABLE)
 227:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 {
 228:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     /* Set FSM state to receive byte by byte.  
 229:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     * The byte by byte receive is always chosen for two addreses. T
 230:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     */
 231:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     SCB_1_fsmState = SCB_1_EZI2C_FSM_BYTE_WRITE;
 232:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 }
 233:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 #else
 234:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 {
 235:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     if(locBufSize < SCB_1_FIFO_SIZE)
 236:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     {
 237:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                         /* Set FSM state to receive byte by byte */
 238:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                         SCB_1_fsmState = SCB_1_EZI2C_FSM_BYTE_WRITE;
 239:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     }
 240:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     /* Receive use RX FIFO chunks */
 241:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     else if(locBufSize == SCB_1_FIFO_SIZE)
 242:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     {
 243:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                         SCB_1_ENABLE_SLAVE_AUTO_DATA; /* NACK when RX FIFO is full 
 244:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                         SCB_1_SetRxInterruptMode(SCB_1_NO_INTR_SOURCES);
 245:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     }
 246:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     else
 247:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     {
 248:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                         SCB_1_ENABLE_SLAVE_AUTO_DATA_ACK; /* Stretch when RX FIFO i
 249:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                         SCB_1_SetRxInterruptMode(SCB_1_INTR_RX_FULL);
 250:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                     }
 251:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 }
 252:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 #endif
 253:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 
 254:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             #endif /* (SCB_1_CY_SCBIP_V0) */
 255:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 256:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Store local offset into global variable */
 257:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_EZI2C_SET_OFFSET(activeAddress, locIndex);
 352              		.loc 1 257 0
 353 01ec FB69     		ldr	r3, [r7, #28]
 354 01ee 9AB2     		uxth	r2, r3
 355 01f0 264B     		ldr	r3, .L40+32
 356 01f2 1A80     		strh	r2, [r3]
 258:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             }
 259:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             else
 260:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             {
 261:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Discard offset byte and NACK */
 262:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_I2C_SLAVE_GENERATE_NACK;
 263:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             }
 264:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             break;
 357              		.loc 1 264 0
 358 01f4 07E0     		b	.L16
 359              	.L17:
 262:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 SCB_1_I2C_SLAVE_GENERATE_NACK;
 360              		.loc 1 262 0
 361 01f6 314B     		ldr	r3, .L40+80
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 12


 362 01f8 0222     		mov	r2, #2
 363 01fa 1A60     		str	r2, [r3]
 364              		.loc 1 264 0
 365 01fc 03E0     		b	.L16
 366              	.L39:
 265:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 266:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         default:
 267:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             CYASSERT(0u != 0u); /* Should never get there */
 367              		.loc 1 267 0 discriminator 1
 368 01fe 0020     		mov	r0, #0
 369 0200 FFF7FEFF 		bl	CyHalt
 268:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             break;
 370              		.loc 1 268 0
 371 0204 C046     		mov	r8, r8
 372              	.L16:
 269:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 270:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 271:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ClearRxInterruptSource(SCB_1_INTR_RX_NOT_EMPTY);
 373              		.loc 1 271 0
 374 0206 254B     		ldr	r3, .L40+48
 375 0208 0422     		mov	r2, #4
 376 020a 1A60     		str	r2, [r3]
 377 020c 81E0     		b	.L8
 378              	.L9:
 272:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 273:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 274:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* INTR_RX.FULL, INTR_SLAVE.I2C_STOP */
 275:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Receive use FIFO chunks: auto data ACK is enabled */
 276:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 else if (0u != (SCB_1_I2C_CTRL_REG & SCB_1_I2C_CTRL_S_READY_DATA_ACK))
 379              		.loc 1 276 0
 380 020e 204B     		ldr	r3, .L40+36
 381 0210 1A68     		ldr	r2, [r3]
 382 0212 8023     		mov	r3, #128
 383 0214 9B01     		lsl	r3, r3, #6
 384 0216 1340     		and	r3, r2
 385 0218 00D1     		bne	.LCB332
 386 021a 7AE0     		b	.L8	@long jump
 387              	.LCB332:
 277:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 278:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Slave interrupt (I2C_STOP or I2C_ADDR_MATCH) leads to completion of read. */
 279:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* The completion event has a high priority than the FIFO full. Read the remain
 280:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if(0u != (locIntrCause & SCB_1_INTR_CAUSE_SLAVE))
 388              		.loc 1 280 0
 389 021c BA68     		ldr	r2, [r7, #8]
 390 021e 0223     		mov	r3, #2
 391 0220 1340     		and	r3, r2
 392 0222 0DD0     		beq	.L24
 281:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 282:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Read remaining bytes from RX FIFO */
 283:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         fifoIndex = SCB_1_GET_RX_FIFO_ENTRIES;
 393              		.loc 1 283 0
 394 0224 294B     		ldr	r3, .L40+96
 395 0226 1A68     		ldr	r2, [r3]
 396 0228 0F23     		mov	r3, #15
 397 022a 1340     		and	r3, r2
 398 022c 3B61     		str	r3, [r7, #16]
 284:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 13


 285:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         #if(SCB_1_SECONDARY_ADDRESS_ENABLE)
 286:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 287:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Update with current address match */
 288:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             if(SCB_1_CHECK_INTR_SLAVE_MASKED(SCB_1_INTR_SLAVE_I2C_ADDR_MATCH))
 289:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             {
 290:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* Update RX FIFO entries as address byte is there now */
 291:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 fifoIndex = SCB_1_GET_RX_FIFO_ENTRIES;
 292:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 293:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 /* If the SR is valid, the RX FIFO is full and the address is in th
 294:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 * leave the address in the RX FIFO for further processing.
 295:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 * If the SR is invalid, the address is already in the RX FIFO: read
 296:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 */
 297:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                 fifoIndex -= ((0u != SCB_1_GET_RX_FIFO_SR_VALID) ? (0u) : (1u));
 298:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             }
 299:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 300:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         #endif
 301:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 302:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_DISABLE_SLAVE_AUTO_DATA;
 399              		.loc 1 302 0
 400 022e 184B     		ldr	r3, .L40+36
 401 0230 174A     		ldr	r2, .L40+36
 402 0232 1168     		ldr	r1, [r2]
 403 0234 174A     		ldr	r2, .L40+40
 404 0236 0A40     		and	r2, r1
 405 0238 1A60     		str	r2, [r3]
 303:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         endTransfer = SCB_1_EZI2C_CONTINUE_TRANSFER;
 406              		.loc 1 303 0
 407 023a 0123     		mov	r3, #1
 408 023c 7B61     		str	r3, [r7, #20]
 304:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 305:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     else
 306:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* INTR_RX_FULL */
 307:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Continue transfer or disable INTR_RX_FULL to catch completion event. */
 308:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 309:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Calculate buffer size available to write data into */
 310:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locBufSize -= (uint16) SCB_1_FIFO_SIZE;
 311:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 312:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         if(locBufSize <= SCB_1_FIFO_SIZE)
 313:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 314:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Send NACK when RX FIFO overflow */
 315:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             fifoIndex   = locBufSize;
 316:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             endTransfer = SCB_1_EZI2C_COMPLETE_TRANSFER;
 317:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 318:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         else
 319:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 320:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Continue  transaction */
 321:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             fifoIndex   = SCB_1_FIFO_SIZE;
 322:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             endTransfer = SCB_1_EZI2C_CONTINUE_TRANSFER;
 323:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 324:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 325:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 326:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     for(; (0u != fifoIndex); fifoIndex--)
 409              		.loc 1 326 0
 410 023e 55E0     		b	.L27
 411              	.L24:
 310:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locBufSize -= (uint16) SCB_1_FIFO_SIZE;
 412              		.loc 1 310 0
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 14


 413 0240 1D4B     		ldr	r3, .L40+76
 414 0242 1B88     		ldrh	r3, [r3]
 415 0244 083B     		sub	r3, r3, #8
 416 0246 9AB2     		uxth	r2, r3
 417 0248 1B4B     		ldr	r3, .L40+76
 418 024a 1A80     		strh	r2, [r3]
 312:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         if(locBufSize <= SCB_1_FIFO_SIZE)
 419              		.loc 1 312 0
 420 024c 1A4B     		ldr	r3, .L40+76
 421 024e 1B88     		ldrh	r3, [r3]
 422 0250 082B     		cmp	r3, #8
 423 0252 05D8     		bhi	.L26
 315:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             fifoIndex   = locBufSize;
 424              		.loc 1 315 0
 425 0254 184B     		ldr	r3, .L40+76
 426 0256 1B88     		ldrh	r3, [r3]
 427 0258 3B61     		str	r3, [r7, #16]
 316:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             endTransfer = SCB_1_EZI2C_COMPLETE_TRANSFER;
 428              		.loc 1 316 0
 429 025a 0023     		mov	r3, #0
 430 025c 7B61     		str	r3, [r7, #20]
 431              		.loc 1 326 0
 432 025e 45E0     		b	.L27
 433              	.L26:
 321:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             fifoIndex   = SCB_1_FIFO_SIZE;
 434              		.loc 1 321 0
 435 0260 0823     		mov	r3, #8
 436 0262 3B61     		str	r3, [r7, #16]
 322:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             endTransfer = SCB_1_EZI2C_CONTINUE_TRANSFER;
 437              		.loc 1 322 0
 438 0264 0123     		mov	r3, #1
 439 0266 7B61     		str	r3, [r7, #20]
 440              		.loc 1 326 0
 441 0268 40E0     		b	.L27
 442              	.L41:
 443 026a C046     		.align	2
 444              	.L40:
 445 026c 00000000 		.word	SCB_1_customIntrHandler
 446 0270 00000000 		.word	SCB_1_indexBuf1
 447 0274 400F0740 		.word	1074204480
 448 0278 000E0740 		.word	1074204160
 449 027c 01010000 		.word	257
 450 0280 00000740 		.word	1074200576
 451 0284 00000000 		.word	SCB_1_curStatus
 452 0288 880F0740 		.word	1074204552
 453 028c 00000000 		.word	SCB_1_offsetBuf1
 454 0290 60000740 		.word	1074200672
 455 0294 FF5FFFFF 		.word	-40961
 456 0298 C80F0740 		.word	1074204616
 457 029c C00F0740 		.word	1074204608
 458 02a0 ED0F0000 		.word	4077
 459 02a4 FF0F0000 		.word	4095
 460 02a8 00000000 		.word	SCB_1_fsmState
 461 02ac 880E0740 		.word	1074204296
 462 02b0 CC0F0740 		.word	1074204620
 463 02b4 40030740 		.word	1074201408
 464 02b8 00000000 		.word	locBufSize.4657
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 15


 465 02bc 6C000740 		.word	1074200684
 466 02c0 00000000 		.word	SCB_1_dataBuffer1
 467 02c4 00000000 		.word	SCB_1_bufSizeBuf1
 468 02c8 00000000 		.word	SCB_1_protectBuf1
 469 02cc 08030740 		.word	1074201352
 470              	.L28:
 327:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 328:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Store data in the buffer */
 329:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_dataBuffer1[locIndex] = (uint8) SCB_1_RX_FIFO_RD_REG;
 471              		.loc 1 329 0 discriminator 2
 472 02d0 5C4B     		ldr	r3, .L42
 473 02d2 1A68     		ldr	r2, [r3]
 474 02d4 FB69     		ldr	r3, [r7, #28]
 475 02d6 D218     		add	r2, r2, r3
 476 02d8 5B4B     		ldr	r3, .L42+4
 477 02da 1B68     		ldr	r3, [r3]
 478 02dc DBB2     		uxtb	r3, r3
 479 02de 1370     		strb	r3, [r2]
 330:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locIndex++;
 480              		.loc 1 330 0 discriminator 2
 481 02e0 FB69     		ldr	r3, [r7, #28]
 482 02e2 0133     		add	r3, r3, #1
 483 02e4 FB61     		str	r3, [r7, #28]
 326:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     for(; (0u != fifoIndex); fifoIndex--)
 484              		.loc 1 326 0 discriminator 2
 485 02e6 3B69     		ldr	r3, [r7, #16]
 486 02e8 013B     		sub	r3, r3, #1
 487 02ea 3B61     		str	r3, [r7, #16]
 488              	.L27:
 326:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     for(; (0u != fifoIndex); fifoIndex--)
 489              		.loc 1 326 0 is_stmt 0 discriminator 1
 490 02ec 3B69     		ldr	r3, [r7, #16]
 491 02ee 002B     		cmp	r3, #0
 492 02f0 EED1     		bne	.L28
 331:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 332:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 333:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Complete transfer sending NACK when RX FIFO overflow */
 334:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if(SCB_1_EZI2C_COMPLETE_TRANSFER == endTransfer)
 493              		.loc 1 334 0 is_stmt 1
 494 02f2 7B69     		ldr	r3, [r7, #20]
 495 02f4 002B     		cmp	r3, #0
 496 02f6 09D1     		bne	.L29
 335:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 336:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ENABLE_SLAVE_AUTO_DATA_NACK;
 497              		.loc 1 336 0
 498 02f8 544B     		ldr	r3, .L42+8
 499 02fa 544A     		ldr	r2, .L42+8
 500 02fc 1268     		ldr	r2, [r2]
 501 02fe 8021     		mov	r1, #128
 502 0300 0902     		lsl	r1, r1, #8
 503 0302 0A43     		orr	r2, r1
 504 0304 1A60     		str	r2, [r3]
 337:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 338:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Disable INTR_RX_FULL while last RX FIFO chunk reception */
 339:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_SetRxInterruptMode(SCB_1_NO_INTR_SOURCES);
 505              		.loc 1 339 0
 506 0306 524B     		ldr	r3, .L42+12
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 16


 507 0308 0022     		mov	r2, #0
 508 030a 1A60     		str	r2, [r3]
 509              	.L29:
 340:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 341:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 342:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_ClearRxInterruptSource(SCB_1_INTR_RX_FULL |
 510              		.loc 1 342 0
 511 030c 514B     		ldr	r3, .L42+16
 512 030e 0C22     		mov	r2, #12
 513 0310 1A60     		str	r2, [r3]
 514              	.L8:
 343:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                                                             SCB_1_INTR_RX_NOT_EMPTY);
 344:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 345:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 else
 346:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 347:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Exit for slave interrupts which do not active for RX direction:
 348:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     * INTR_SLAVE.I2C_ADDR_MATCH and INTR_SLAVE.I2C_STOP while byte-by-byte receptio
 349:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     */
 350:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 351:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             }
 352:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 353:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             if(0u != (locIntrCause & SCB_1_INTR_CAUSE_SLAVE))
 515              		.loc 1 353 0
 516 0312 BA68     		ldr	r2, [r7, #8]
 517 0314 0223     		mov	r3, #2
 518 0316 1340     		and	r3, r2
 519 0318 66D0     		beq	.L30
 354:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             {
 355:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* INTR_SLAVE.I2C_STOP */
 356:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Catch Stop condition: completion of write or read transfer */
 357:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             #if(!SCB_1_SECONDARY_ADDRESS_ENABLE_CONST)
 358:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 if(0u != (locIntrSlave & SCB_1_INTR_SLAVE_I2C_STOP))
 520              		.loc 1 358 0
 521 031a FA68     		ldr	r2, [r7, #12]
 522 031c 1023     		mov	r3, #16
 523 031e 1340     		and	r3, r2
 524 0320 26D0     		beq	.L31
 359:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             #else
 360:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Prevent triggering when matched address was NACKed */
 361:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 if((0u != (locIntrSlave & SCB_1_INTR_SLAVE_I2C_STOP)) &&
 362:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                    (0u != ((uint8) SCB_1_EZI2C_STATUS_BUSY & SCB_1_curStatus)))
 363:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             #endif
 364:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 365:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Disable TX and RX interrupt sources */
 366:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_SetRxInterruptMode(SCB_1_NO_INTR_SOURCES);
 525              		.loc 1 366 0
 526 0322 4B4B     		ldr	r3, .L42+12
 527 0324 0022     		mov	r2, #0
 528 0326 1A60     		str	r2, [r3]
 367:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_SetTxInterruptMode(SCB_1_NO_INTR_SOURCES);
 529              		.loc 1 367 0
 530 0328 4B4B     		ldr	r3, .L42+20
 531 032a 0022     		mov	r2, #0
 532 032c 1A60     		str	r2, [r3]
 368:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 369:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Set read completion mask */
 370:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     locStatus = SCB_1_INTR_SLAVE_I2C_NACK;
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 17


 533              		.loc 1 370 0
 534 032e 0223     		mov	r3, #2
 535 0330 BB61     		str	r3, [r7, #24]
 371:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 372:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Check if buffer content was modified: the address phase resets the locIndex 
 373:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if(locIndex != SCB_1_EZI2C_GET_OFFSET(activeAddress))
 536              		.loc 1 373 0
 537 0332 4A4B     		ldr	r3, .L42+24
 538 0334 1B88     		ldrh	r3, [r3]
 539 0336 1A1C     		mov	r2, r3
 540 0338 FB69     		ldr	r3, [r7, #28]
 541 033a 9A42     		cmp	r2, r3
 542 033c 03D0     		beq	.L32
 374:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 375:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locStatus |= SCB_1_INTR_SLAVE_I2C_WRITE_STOP;
 543              		.loc 1 375 0
 544 033e BB69     		ldr	r3, [r7, #24]
 545 0340 0822     		mov	r2, #8
 546 0342 1343     		orr	r3, r2
 547 0344 BB61     		str	r3, [r7, #24]
 548              	.L32:
 376:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 377:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 378:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Complete read or write transaction */
 379:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     locStatus &= locIntrSlave;
 549              		.loc 1 379 0
 550 0346 BB69     		ldr	r3, [r7, #24]
 551 0348 FA68     		ldr	r2, [r7, #12]
 552 034a 1340     		and	r3, r2
 553 034c BB61     		str	r3, [r7, #24]
 380:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_EZI2C_UPDATE_LOC_STATUS(activeAddress, locStatus);
 381:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     locStatus |= (uint32)  SCB_1_curStatus;
 554              		.loc 1 381 0
 555 034e 444B     		ldr	r3, .L42+28
 556 0350 1B78     		ldrb	r3, [r3]
 557 0352 DBB2     		uxtb	r3, r3
 558 0354 BA69     		ldr	r2, [r7, #24]
 559 0356 1343     		orr	r3, r2
 560 0358 BB61     		str	r3, [r7, #24]
 382:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     locStatus &= (uint32) ~SCB_1_EZI2C_STATUS_BUSY;
 561              		.loc 1 382 0
 562 035a BB69     		ldr	r3, [r7, #24]
 563 035c 2022     		mov	r2, #32
 564 035e 9343     		bic	r3, r2
 565 0360 BB61     		str	r3, [r7, #24]
 383:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_curStatus = (uint8) locStatus;
 566              		.loc 1 383 0
 567 0362 BB69     		ldr	r3, [r7, #24]
 568 0364 DAB2     		uxtb	r2, r3
 569 0366 3E4B     		ldr	r3, .L42+28
 570 0368 1A70     		strb	r2, [r3]
 384:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 385:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     SCB_1_fsmState = SCB_1_EZI2C_FSM_IDLE;
 571              		.loc 1 385 0
 572 036a 3E4B     		ldr	r3, .L42+32
 573 036c 0222     		mov	r2, #2
 574 036e 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 18


 575              	.L31:
 386:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 387:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #if(SCB_1_SECONDARY_ADDRESS_ENABLE)
 388:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 389:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Store local index into global variable, before addrss phase */
 390:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_EZI2C_SET_INDEX(activeAddress, locIndex);
 391:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 392:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #endif
 393:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 394:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 395:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* INTR_SLAVE.I2C_ADDR_MATCH */
 396:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* The matched address is received: the slave starts its operation.
 397:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 * The INTR_SLAVE_I2C_STOP updates the buffer index before the address phase for two
 398:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 * This is done to update buffer index correctly before the address phase changes it
 399:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 */
 400:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 if(0u != (locIntrSlave & SCB_1_INTR_SLAVE_I2C_ADDR_MATCH))
 576              		.loc 1 400 0
 577 0370 FA68     		ldr	r2, [r7, #12]
 578 0372 4023     		mov	r3, #64
 579 0374 1340     		and	r3, r2
 580 0376 34D0     		beq	.L33
 401:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 402:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #if(SCB_1_SECONDARY_ADDRESS_ENABLE)
 403:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 404:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Read address byte from RX FIFO */
 405:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locByte = SCB_1_GET_I2C_7BIT_ADDRESS(SCB_1_RX_FIFO_RD_REG);
 406:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 407:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ClearRxInterruptSource(SCB_1_INTR_RX_NOT_EMPTY);
 408:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 409:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Check received address against device addresses */
 410:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         if(SCB_1_addrBuf1 == locByte)
 411:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 412:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Set buffer exposed to primary slave address */
 413:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_dataBuffer = SCB_1_dataBuffer1;
 414:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_bufSizeBuf = SCB_1_bufSizeBuf1;
 415:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_protectBuf = SCB_1_protectBuf1;
 416:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 417:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             activeAddress = SCB_1_EZI2C_ACTIVE_ADDRESS1;
 418:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 419:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         else if(SCB_1_addrBuf2 == locByte)
 420:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 421:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Set buffer exposed to secondary slave address */
 422:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_dataBuffer = SCB_1_dataBuffer2;
 423:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_bufSizeBuf = SCB_1_bufSizeBuf2;
 424:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_protectBuf = SCB_1_protectBuf2;
 425:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 426:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             activeAddress = SCB_1_EZI2C_ACTIVE_ADDRESS2;
 427:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 428:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         else
 429:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 430:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Address does not match */
 431:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             ackResponse = SCB_1_EZI2C_NACK_RECEIVED_ADDRESS;
 432:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 433:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 434:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #endif
 435:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 436:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 #if(SCB_1_SECONDARY_ADDRESS_ENABLE_CONST)
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 19


 437:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if(SCB_1_EZI2C_NACK_RECEIVED_ADDRESS == ackResponse)
 438:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 439:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Clear interrupt sources before NACK address */
 440:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ClearI2CExtClkInterruptSource(SCB_1_INTR_I2C_EC_WAKE_UP);
 441:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ClearSlaveInterruptSource(SCB_1_INTR_SLAVE_ALL);
 442:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 443:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #if(!SCB_1_CY_SCBIP_V0)
 444:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Disable INTR_I2C_STOP to not trigger after matched address is NACKed. Ti
 445:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_DISABLE_INTR_SLAVE(SCB_1_INTR_SLAVE_I2C_STOP);
 446:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #endif /* (!SCB_1_CY_SCBIP_V0) */
 447:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 448:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* NACK address byte: it does not match neither primary nor secondary */
 449:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_I2C_SLAVE_GENERATE_NACK;
 450:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 451:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     else
 452:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 #endif /* (SCB_1_SECONDARY_ADDRESS_ENABLE_CONST) */
 453:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 454:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 455:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #if(SCB_1_SCB_MODE_UNCONFIG_CONST_CFG)
 456:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         if(!SCB_1_SECONDARY_ADDRESS_ENABLE)
 457:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 458:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Set buffer exposed to primary slave address */
 459:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_dataBuffer = SCB_1_dataBuffer1;
 460:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_bufSizeBuf = SCB_1_bufSizeBuf1;
 461:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_protectBuf = SCB_1_protectBuf1;
 462:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 463:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             activeAddress = SCB_1_EZI2C_ACTIVE_ADDRESS1;
 464:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 465:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #endif /* (SCB_1_SCB_MODE_UNCONFIG_CONST_CFG) */
 466:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 467:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Bus becomes busy after address is received */
 468:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_curStatus |= (uint8) SCB_1_EZI2C_STATUS_BUSY;
 581              		.loc 1 468 0
 582 0378 394B     		ldr	r3, .L42+28
 583 037a 1B78     		ldrb	r3, [r3]
 584 037c DBB2     		uxtb	r3, r3
 585 037e 2022     		mov	r2, #32
 586 0380 1343     		orr	r3, r2
 587 0382 DAB2     		uxtb	r2, r3
 588 0384 364B     		ldr	r3, .L42+28
 589 0386 1A70     		strb	r2, [r3]
 469:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 470:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Slave is read or written: set current offset */
 471:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locIndex = SCB_1_EZI2C_GET_OFFSET(activeAddress);
 590              		.loc 1 471 0
 591 0388 344B     		ldr	r3, .L42+24
 592 038a 1B88     		ldrh	r3, [r3]
 593 038c FB61     		str	r3, [r7, #28]
 472:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 473:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Check transaction direction */
 474:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         if(SCB_1_CHECK_I2C_STATUS(SCB_1_I2C_STATUS_S_READ))
 594              		.loc 1 474 0
 595 038e 364B     		ldr	r3, .L42+36
 596 0390 1A68     		ldr	r2, [r3]
 597 0392 1023     		mov	r3, #16
 598 0394 1340     		and	r3, r2
 599 0396 18D0     		beq	.L34
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 20


 475:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 476:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Calculate slave buffer size */
 477:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             locBufSize = SCB_1_bufSizeBuf1 - (uint16) locIndex;
 600              		.loc 1 477 0
 601 0398 344B     		ldr	r3, .L42+40
 602 039a 1A88     		ldrh	r2, [r3]
 603 039c FB69     		ldr	r3, [r7, #28]
 604 039e 9BB2     		uxth	r3, r3
 605 03a0 D31A     		sub	r3, r2, r3
 606 03a2 9AB2     		uxth	r2, r3
 607 03a4 324B     		ldr	r3, .L42+44
 608 03a6 1A80     		strh	r2, [r3]
 478:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 479:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Clear TX FIFO to start fill from offset */
 480:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_CLEAR_TX_FIFO;
 609              		.loc 1 480 0
 610 03a8 324B     		ldr	r3, .L42+48
 611 03aa 324A     		ldr	r2, .L42+48
 612 03ac 1268     		ldr	r2, [r2]
 613 03ae 8021     		mov	r1, #128
 614 03b0 4902     		lsl	r1, r1, #9
 615 03b2 0A43     		orr	r2, r1
 616 03b4 1A60     		str	r2, [r3]
 617 03b6 2F4B     		ldr	r3, .L42+48
 618 03b8 2E4A     		ldr	r2, .L42+48
 619 03ba 1168     		ldr	r1, [r2]
 620 03bc 2E4A     		ldr	r2, .L42+52
 621 03be 0A40     		and	r2, r1
 622 03c0 1A60     		str	r2, [r3]
 481:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_SetTxInterruptMode(SCB_1_INTR_TX_EMPTY);
 623              		.loc 1 481 0
 624 03c2 254B     		ldr	r3, .L42+20
 625 03c4 1022     		mov	r2, #16
 626 03c6 1A60     		str	r2, [r3]
 627 03c8 02E0     		b	.L35
 628              	.L34:
 482:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 483:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         else
 484:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         {
 485:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             /* Master writes: enable reception interrupt. The FSM state was set in 
 486:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                             SCB_1_SetRxInterruptMode(SCB_1_INTR_RX_NOT_EMPTY);
 629              		.loc 1 486 0
 630 03ca 214B     		ldr	r3, .L42+12
 631 03cc 0422     		mov	r2, #4
 632 03ce 1A60     		str	r2, [r3]
 633              	.L35:
 487:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         }
 488:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 489:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Clear interrupt sources before ACK address */
 490:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ClearI2CExtClkInterruptSource(SCB_1_INTR_I2C_EC_WAKE_UP);
 634              		.loc 1 490 0
 635 03d0 2A4B     		ldr	r3, .L42+56
 636 03d2 0122     		mov	r2, #1
 637 03d4 1A60     		str	r2, [r3]
 491:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ClearSlaveInterruptSource(SCB_1_INTR_SLAVE_ALL);
 638              		.loc 1 491 0
 639 03d6 2A4B     		ldr	r3, .L42+60
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 21


 640 03d8 2A4A     		ldr	r2, .L42+64
 641 03da 1A60     		str	r2, [r3]
 492:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 493:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #if(!SCB_1_CY_SCBIP_V0)
 494:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* Enable STOP to trigger after address match is ACKed. Ticket ID#156094 */
 495:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_ENABLE_INTR_SLAVE(SCB_1_INTR_SLAVE_I2C_STOP);
 496:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     #endif /* (!SCB_1_CY_SCBIP_V0) */
 497:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 498:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         /* ACK the address byte */
 499:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_I2C_SLAVE_GENERATE_ACK;
 642              		.loc 1 499 0
 643 03dc 2A4B     		ldr	r3, .L42+68
 644 03de 0122     		mov	r2, #1
 645 03e0 1A60     		str	r2, [r3]
 646              	.L33:
 500:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 501:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 502:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 503:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Clear slave interrupt sources */
 504:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 SCB_1_ClearSlaveInterruptSource(locIntrSlave);
 647              		.loc 1 504 0
 648 03e2 274B     		ldr	r3, .L42+60
 649 03e4 FA68     		ldr	r2, [r7, #12]
 650 03e6 1A60     		str	r2, [r3]
 651              	.L30:
 505:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             }
 506:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 507:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             /* INTR_TX.EMPTY */
 508:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             /* Transmits data to the master: loads data into the TX FIFO. The 0xFF sends out if the
 509:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             * The address reception with a read flag clears the TX FIFO to be loaded with data.
 510:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             */
 511:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             if(0u != (SCB_1_GetInterruptCause() & SCB_1_INTR_CAUSE_TX))
 652              		.loc 1 511 0
 653 03e8 284B     		ldr	r3, .L42+72
 654 03ea 1A68     		ldr	r2, [r3]
 655 03ec 0423     		mov	r3, #4
 656 03ee 1340     		and	r3, r2
 657 03f0 21D0     		beq	.L6
 658              	.L38:
 512:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             {
 513:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 /* Put data into TX FIFO until there is a room */
 514:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 do
 515:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 {
 516:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     /* Check transmit buffer range: locBufSize calculates after address reception *
 517:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     if(0u != locBufSize)
 659              		.loc 1 517 0
 660 03f2 1F4B     		ldr	r3, .L42+44
 661 03f4 1B88     		ldrh	r3, [r3]
 662 03f6 002B     		cmp	r3, #0
 663 03f8 11D0     		beq	.L36
 518:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 519:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_TX_FIFO_WR_REG = (uint32) SCB_1_dataBuffer1[locIndex];
 664              		.loc 1 519 0
 665 03fa 254B     		ldr	r3, .L42+76
 666 03fc 114A     		ldr	r2, .L42
 667 03fe 1168     		ldr	r1, [r2]
 668 0400 FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 22


 669 0402 8A18     		add	r2, r1, r2
 670 0404 1278     		ldrb	r2, [r2]
 671 0406 D2B2     		uxtb	r2, r2
 672 0408 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locIndex++;
 673              		.loc 1 520 0
 674 040a FB69     		ldr	r3, [r7, #28]
 675 040c 0133     		add	r3, r3, #1
 676 040e FB61     		str	r3, [r7, #28]
 521:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         locBufSize--;
 677              		.loc 1 521 0
 678 0410 174B     		ldr	r3, .L42+44
 679 0412 1B88     		ldrh	r3, [r3]
 680 0414 013B     		sub	r3, r3, #1
 681 0416 9AB2     		uxth	r2, r3
 682 0418 154B     		ldr	r3, .L42+44
 683 041a 1A80     		strh	r2, [r3]
 684 041c 02E0     		b	.L37
 685              	.L36:
 522:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 523:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     else
 524:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     {
 525:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                         SCB_1_TX_FIFO_WR_REG = SCB_1_EZI2C_OVFL_RETURN;
 686              		.loc 1 525 0
 687 041e 1C4B     		ldr	r3, .L42+76
 688 0420 FF22     		mov	r2, #255
 689 0422 1A60     		str	r2, [r3]
 690              	.L37:
 526:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                     }
 527:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 }
 528:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 while(SCB_1_FIFO_SIZE != SCB_1_GET_TX_FIFO_ENTRIES);
 691              		.loc 1 528 0
 692 0424 1B4B     		ldr	r3, .L42+80
 693 0426 1A68     		ldr	r2, [r3]
 694 0428 0F23     		mov	r3, #15
 695 042a 1340     		and	r3, r2
 696 042c 082B     		cmp	r3, #8
 697 042e E0D1     		bne	.L38
 529:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 530:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****                 SCB_1_ClearTxInterruptSource(SCB_1_INTR_TX_EMPTY);
 698              		.loc 1 530 0
 699 0430 194B     		ldr	r3, .L42+84
 700 0432 1022     		mov	r2, #16
 701 0434 1A60     		str	r2, [r3]
 702              	.L6:
 531:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****             }
 532:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         }
 533:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c **** 
 534:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         /* Store local index copy into global variable */
 535:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****         SCB_1_EZI2C_SET_INDEX(activeAddress, locIndex);
 703              		.loc 1 535 0
 704 0436 FB69     		ldr	r3, [r7, #28]
 705 0438 9AB2     		uxth	r2, r3
 706 043a 184B     		ldr	r3, .L42+88
 707 043c 1A80     		strh	r2, [r3]
 536:.\Generated_Source\PSoC4/SCB_1_EZI2C_INT.c ****     }
 708              		.loc 1 536 0
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 23


 709 043e BD46     		mov	sp, r7
 710 0440 08B0     		add	sp, sp, #32
 711              		@ sp needed for prologue
 712 0442 80BD     		pop	{r7, pc}
 713              	.L43:
 714              		.align	2
 715              	.L42:
 716 0444 00000000 		.word	SCB_1_dataBuffer1
 717 0448 40030740 		.word	1074201408
 718 044c 60000740 		.word	1074200672
 719 0450 C80F0740 		.word	1074204616
 720 0454 C00F0740 		.word	1074204608
 721 0458 880F0740 		.word	1074204552
 722 045c 00000000 		.word	SCB_1_offsetBuf1
 723 0460 00000000 		.word	SCB_1_curStatus
 724 0464 00000000 		.word	SCB_1_fsmState
 725 0468 64000740 		.word	1074200676
 726 046c 00000000 		.word	SCB_1_bufSizeBuf1
 727 0470 00000000 		.word	locBufSize.4657
 728 0474 04020740 		.word	1074201092
 729 0478 FFFFFEFF 		.word	-65537
 730 047c 800E0740 		.word	1074204288
 731 0480 400F0740 		.word	1074204480
 732 0484 FF0F0000 		.word	4095
 733 0488 6C000740 		.word	1074200684
 734 048c 000E0740 		.word	1074204160
 735 0490 40020740 		.word	1074201152
 736 0494 08020740 		.word	1074201096
 737 0498 800F0740 		.word	1074204544
 738 049c 00000000 		.word	SCB_1_indexBuf1
 739              		.cfi_endproc
 740              	.LFE0:
 741              		.size	SCB_1_EZI2C_STRETCH_ISR, .-SCB_1_EZI2C_STRETCH_ISR
 742              		.bss
 743              		.align	1
 744              	locBufSize.4657:
 745 0000 0000     		.space	2
 746              		.text
 747              	.Letext0:
 748              		.file 2 "./Generated_Source/PSoC4/cytypes.h"
 749              		.file 3 ".\\Generated_Source\\PSoC4\\SCB_1_PVT.h"
 750              		.file 4 ".\\Generated_Source\\PSoC4\\SCB_1_EZI2C_PVT.h"
 751              		.section	.debug_info,"",%progbits
 752              	.Ldebug_info0:
 753 0000 CE010000 		.4byte	0x1ce
 754 0004 0200     		.2byte	0x2
 755 0006 00000000 		.4byte	.Ldebug_abbrev0
 756 000a 04       		.byte	0x4
 757 000b 01       		.uleb128 0x1
 758 000c C2010000 		.4byte	.LASF34
 759 0010 01       		.byte	0x1
 760 0011 BE000000 		.4byte	.LASF35
 761 0015 7F000000 		.4byte	.LASF36
 762 0019 00000000 		.4byte	.Ldebug_ranges0+0
 763 001d 00000000 		.4byte	0
 764 0021 00000000 		.4byte	0
 765 0025 00000000 		.4byte	.Ldebug_line0
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 24


 766 0029 02       		.uleb128 0x2
 767 002a 01       		.byte	0x1
 768 002b 06       		.byte	0x6
 769 002c 37020000 		.4byte	.LASF0
 770 0030 02       		.uleb128 0x2
 771 0031 01       		.byte	0x1
 772 0032 08       		.byte	0x8
 773 0033 41000000 		.4byte	.LASF1
 774 0037 02       		.uleb128 0x2
 775 0038 02       		.byte	0x2
 776 0039 05       		.byte	0x5
 777 003a B8010000 		.4byte	.LASF2
 778 003e 02       		.uleb128 0x2
 779 003f 02       		.byte	0x2
 780 0040 07       		.byte	0x7
 781 0041 06000000 		.4byte	.LASF3
 782 0045 02       		.uleb128 0x2
 783 0046 04       		.byte	0x4
 784 0047 05       		.byte	0x5
 785 0048 1C020000 		.4byte	.LASF4
 786 004c 02       		.uleb128 0x2
 787 004d 04       		.byte	0x4
 788 004e 07       		.byte	0x7
 789 004f 67000000 		.4byte	.LASF5
 790 0053 02       		.uleb128 0x2
 791 0054 08       		.byte	0x8
 792 0055 05       		.byte	0x5
 793 0056 89010000 		.4byte	.LASF6
 794 005a 02       		.uleb128 0x2
 795 005b 08       		.byte	0x8
 796 005c 07       		.byte	0x7
 797 005d 42010000 		.4byte	.LASF7
 798 0061 03       		.uleb128 0x3
 799 0062 04       		.byte	0x4
 800 0063 05       		.byte	0x5
 801 0064 696E7400 		.ascii	"int\000"
 802 0068 02       		.uleb128 0x2
 803 0069 04       		.byte	0x4
 804 006a 07       		.byte	0x7
 805 006b 20010000 		.4byte	.LASF8
 806 006f 04       		.uleb128 0x4
 807 0070 79000000 		.4byte	.LASF9
 808 0074 02       		.byte	0x2
 809 0075 5B       		.byte	0x5b
 810 0076 30000000 		.4byte	0x30
 811 007a 04       		.uleb128 0x4
 812 007b 00010000 		.4byte	.LASF10
 813 007f 02       		.byte	0x2
 814 0080 5C       		.byte	0x5c
 815 0081 3E000000 		.4byte	0x3e
 816 0085 04       		.uleb128 0x4
 817 0086 07010000 		.4byte	.LASF11
 818 008a 02       		.byte	0x2
 819 008b 5D       		.byte	0x5d
 820 008c 4C000000 		.4byte	0x4c
 821 0090 02       		.uleb128 0x2
 822 0091 04       		.byte	0x4
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 25


 823 0092 04       		.byte	0x4
 824 0093 32000000 		.4byte	.LASF12
 825 0097 02       		.uleb128 0x2
 826 0098 08       		.byte	0x8
 827 0099 04       		.byte	0x4
 828 009a E9000000 		.4byte	.LASF13
 829 009e 02       		.uleb128 0x2
 830 009f 01       		.byte	0x1
 831 00a0 08       		.byte	0x8
 832 00a1 97010000 		.4byte	.LASF14
 833 00a5 05       		.uleb128 0x5
 834 00a6 6F000000 		.4byte	0x6f
 835 00aa 04       		.uleb128 0x4
 836 00ab 00000000 		.4byte	.LASF15
 837 00af 02       		.byte	0x2
 838 00b0 F2       		.byte	0xf2
 839 00b1 B5000000 		.4byte	0xb5
 840 00b5 05       		.uleb128 0x5
 841 00b6 85000000 		.4byte	0x85
 842 00ba 06       		.uleb128 0x6
 843 00bb 63010000 		.4byte	.LASF16
 844 00bf 02       		.byte	0x2
 845 00c0 0201     		.2byte	0x102
 846 00c2 C6000000 		.4byte	0xc6
 847 00c6 07       		.uleb128 0x7
 848 00c7 04       		.byte	0x4
 849 00c8 CC000000 		.4byte	0xcc
 850 00cc 08       		.uleb128 0x8
 851 00cd 01       		.byte	0x1
 852 00ce 02       		.uleb128 0x2
 853 00cf 04       		.byte	0x4
 854 00d0 07       		.byte	0x7
 855 00d1 70010000 		.4byte	.LASF17
 856 00d5 09       		.uleb128 0x9
 857 00d6 01       		.byte	0x1
 858 00d7 4B020000 		.4byte	.LASF37
 859 00db 01       		.byte	0x1
 860 00dc 25       		.byte	0x25
 861 00dd 01       		.byte	0x1
 862 00de 00000000 		.4byte	.LFB0
 863 00e2 A0040000 		.4byte	.LFE0
 864 00e6 00000000 		.4byte	.LLST0
 865 00ea 01       		.byte	0x1
 866 00eb 63010000 		.4byte	0x163
 867 00ef 0A       		.uleb128 0xa
 868 00f0 2D010000 		.4byte	.LASF18
 869 00f4 01       		.byte	0x1
 870 00f5 27       		.byte	0x27
 871 00f6 7A000000 		.4byte	0x7a
 872 00fa 05       		.byte	0x5
 873 00fb 03       		.byte	0x3
 874 00fc 00000000 		.4byte	locBufSize.4657
 875 0100 0A       		.uleb128 0xa
 876 0101 38000000 		.4byte	.LASF19
 877 0105 01       		.byte	0x1
 878 0106 28       		.byte	0x28
 879 0107 85000000 		.4byte	0x85
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 26


 880 010b 02       		.byte	0x2
 881 010c 91       		.byte	0x91
 882 010d 74       		.sleb128 -12
 883 010e 0A       		.uleb128 0xa
 884 010f 59010000 		.4byte	.LASF20
 885 0113 01       		.byte	0x1
 886 0114 29       		.byte	0x29
 887 0115 85000000 		.4byte	0x85
 888 0119 02       		.byte	0x2
 889 011a 91       		.byte	0x91
 890 011b 70       		.sleb128 -16
 891 011c 0A       		.uleb128 0xa
 892 011d 19000000 		.4byte	.LASF21
 893 0121 01       		.byte	0x1
 894 0122 2B       		.byte	0x2b
 895 0123 85000000 		.4byte	0x85
 896 0127 02       		.byte	0x2
 897 0128 91       		.byte	0x91
 898 0129 6C       		.sleb128 -20
 899 012a 0A       		.uleb128 0xa
 900 012b 38010000 		.4byte	.LASF22
 901 012f 01       		.byte	0x1
 902 0130 2C       		.byte	0x2c
 903 0131 85000000 		.4byte	0x85
 904 0135 02       		.byte	0x2
 905 0136 91       		.byte	0x91
 906 0137 68       		.sleb128 -24
 907 0138 0A       		.uleb128 0xa
 908 0139 43020000 		.4byte	.LASF23
 909 013d 01       		.byte	0x1
 910 013e 2D       		.byte	0x2d
 911 013f 85000000 		.4byte	0x85
 912 0143 02       		.byte	0x2
 913 0144 91       		.byte	0x91
 914 0145 5C       		.sleb128 -36
 915 0146 0A       		.uleb128 0xa
 916 0147 25000000 		.4byte	.LASF24
 917 014b 01       		.byte	0x1
 918 014c 2F       		.byte	0x2f
 919 014d 85000000 		.4byte	0x85
 920 0151 02       		.byte	0x2
 921 0152 91       		.byte	0x91
 922 0153 60       		.sleb128 -32
 923 0154 0A       		.uleb128 0xa
 924 0155 AB010000 		.4byte	.LASF25
 925 0159 01       		.byte	0x1
 926 015a 30       		.byte	0x30
 927 015b 85000000 		.4byte	0x85
 928 015f 02       		.byte	0x2
 929 0160 91       		.byte	0x91
 930 0161 64       		.sleb128 -28
 931 0162 00       		.byte	0
 932 0163 0B       		.uleb128 0xb
 933 0164 4F000000 		.4byte	.LASF26
 934 0168 03       		.byte	0x3
 935 0169 37       		.byte	0x37
 936 016a BA000000 		.4byte	0xba
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 27


 937 016e 01       		.byte	0x1
 938 016f 01       		.byte	0x1
 939 0170 0B       		.uleb128 0xb
 940 0171 F0000000 		.4byte	.LASF27
 941 0175 04       		.byte	0x4
 942 0176 1D       		.byte	0x1d
 943 0177 A5000000 		.4byte	0xa5
 944 017b 01       		.byte	0x1
 945 017c 01       		.byte	0x1
 946 017d 0B       		.uleb128 0xb
 947 017e 9C010000 		.4byte	.LASF28
 948 0182 04       		.byte	0x4
 949 0183 1E       		.byte	0x1e
 950 0184 6F000000 		.4byte	0x6f
 951 0188 01       		.byte	0x1
 952 0189 01       		.byte	0x1
 953 018a 0B       		.uleb128 0xb
 954 018b 0E010000 		.4byte	.LASF29
 955 018f 04       		.byte	0x4
 956 0190 21       		.byte	0x21
 957 0191 97010000 		.4byte	0x197
 958 0195 01       		.byte	0x1
 959 0196 01       		.byte	0x1
 960 0197 07       		.uleb128 0x7
 961 0198 04       		.byte	0x4
 962 0199 A5000000 		.4byte	0xa5
 963 019d 0B       		.uleb128 0xb
 964 019e 25020000 		.4byte	.LASF30
 965 01a2 04       		.byte	0x4
 966 01a3 22       		.byte	0x22
 967 01a4 7A000000 		.4byte	0x7a
 968 01a8 01       		.byte	0x1
 969 01a9 01       		.byte	0x1
 970 01aa 0B       		.uleb128 0xb
 971 01ab 63020000 		.4byte	.LASF31
 972 01af 04       		.byte	0x4
 973 01b0 23       		.byte	0x23
 974 01b1 7A000000 		.4byte	0x7a
 975 01b5 01       		.byte	0x1
 976 01b6 01       		.byte	0x1
 977 01b7 0B       		.uleb128 0xb
 978 01b8 0B020000 		.4byte	.LASF32
 979 01bc 04       		.byte	0x4
 980 01bd 24       		.byte	0x24
 981 01be 7A000000 		.4byte	0x7a
 982 01c2 01       		.byte	0x1
 983 01c3 01       		.byte	0x1
 984 01c4 0B       		.uleb128 0xb
 985 01c5 79010000 		.4byte	.LASF33
 986 01c9 04       		.byte	0x4
 987 01ca 25       		.byte	0x25
 988 01cb 7A000000 		.4byte	0x7a
 989 01cf 01       		.byte	0x1
 990 01d0 01       		.byte	0x1
 991 01d1 00       		.byte	0
 992              		.section	.debug_abbrev,"",%progbits
 993              	.Ldebug_abbrev0:
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 28


 994 0000 01       		.uleb128 0x1
 995 0001 11       		.uleb128 0x11
 996 0002 01       		.byte	0x1
 997 0003 25       		.uleb128 0x25
 998 0004 0E       		.uleb128 0xe
 999 0005 13       		.uleb128 0x13
 1000 0006 0B       		.uleb128 0xb
 1001 0007 03       		.uleb128 0x3
 1002 0008 0E       		.uleb128 0xe
 1003 0009 1B       		.uleb128 0x1b
 1004 000a 0E       		.uleb128 0xe
 1005 000b 55       		.uleb128 0x55
 1006 000c 06       		.uleb128 0x6
 1007 000d 11       		.uleb128 0x11
 1008 000e 01       		.uleb128 0x1
 1009 000f 52       		.uleb128 0x52
 1010 0010 01       		.uleb128 0x1
 1011 0011 10       		.uleb128 0x10
 1012 0012 06       		.uleb128 0x6
 1013 0013 00       		.byte	0
 1014 0014 00       		.byte	0
 1015 0015 02       		.uleb128 0x2
 1016 0016 24       		.uleb128 0x24
 1017 0017 00       		.byte	0
 1018 0018 0B       		.uleb128 0xb
 1019 0019 0B       		.uleb128 0xb
 1020 001a 3E       		.uleb128 0x3e
 1021 001b 0B       		.uleb128 0xb
 1022 001c 03       		.uleb128 0x3
 1023 001d 0E       		.uleb128 0xe
 1024 001e 00       		.byte	0
 1025 001f 00       		.byte	0
 1026 0020 03       		.uleb128 0x3
 1027 0021 24       		.uleb128 0x24
 1028 0022 00       		.byte	0
 1029 0023 0B       		.uleb128 0xb
 1030 0024 0B       		.uleb128 0xb
 1031 0025 3E       		.uleb128 0x3e
 1032 0026 0B       		.uleb128 0xb
 1033 0027 03       		.uleb128 0x3
 1034 0028 08       		.uleb128 0x8
 1035 0029 00       		.byte	0
 1036 002a 00       		.byte	0
 1037 002b 04       		.uleb128 0x4
 1038 002c 16       		.uleb128 0x16
 1039 002d 00       		.byte	0
 1040 002e 03       		.uleb128 0x3
 1041 002f 0E       		.uleb128 0xe
 1042 0030 3A       		.uleb128 0x3a
 1043 0031 0B       		.uleb128 0xb
 1044 0032 3B       		.uleb128 0x3b
 1045 0033 0B       		.uleb128 0xb
 1046 0034 49       		.uleb128 0x49
 1047 0035 13       		.uleb128 0x13
 1048 0036 00       		.byte	0
 1049 0037 00       		.byte	0
 1050 0038 05       		.uleb128 0x5
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 29


 1051 0039 35       		.uleb128 0x35
 1052 003a 00       		.byte	0
 1053 003b 49       		.uleb128 0x49
 1054 003c 13       		.uleb128 0x13
 1055 003d 00       		.byte	0
 1056 003e 00       		.byte	0
 1057 003f 06       		.uleb128 0x6
 1058 0040 16       		.uleb128 0x16
 1059 0041 00       		.byte	0
 1060 0042 03       		.uleb128 0x3
 1061 0043 0E       		.uleb128 0xe
 1062 0044 3A       		.uleb128 0x3a
 1063 0045 0B       		.uleb128 0xb
 1064 0046 3B       		.uleb128 0x3b
 1065 0047 05       		.uleb128 0x5
 1066 0048 49       		.uleb128 0x49
 1067 0049 13       		.uleb128 0x13
 1068 004a 00       		.byte	0
 1069 004b 00       		.byte	0
 1070 004c 07       		.uleb128 0x7
 1071 004d 0F       		.uleb128 0xf
 1072 004e 00       		.byte	0
 1073 004f 0B       		.uleb128 0xb
 1074 0050 0B       		.uleb128 0xb
 1075 0051 49       		.uleb128 0x49
 1076 0052 13       		.uleb128 0x13
 1077 0053 00       		.byte	0
 1078 0054 00       		.byte	0
 1079 0055 08       		.uleb128 0x8
 1080 0056 15       		.uleb128 0x15
 1081 0057 00       		.byte	0
 1082 0058 27       		.uleb128 0x27
 1083 0059 0C       		.uleb128 0xc
 1084 005a 00       		.byte	0
 1085 005b 00       		.byte	0
 1086 005c 09       		.uleb128 0x9
 1087 005d 2E       		.uleb128 0x2e
 1088 005e 01       		.byte	0x1
 1089 005f 3F       		.uleb128 0x3f
 1090 0060 0C       		.uleb128 0xc
 1091 0061 03       		.uleb128 0x3
 1092 0062 0E       		.uleb128 0xe
 1093 0063 3A       		.uleb128 0x3a
 1094 0064 0B       		.uleb128 0xb
 1095 0065 3B       		.uleb128 0x3b
 1096 0066 0B       		.uleb128 0xb
 1097 0067 27       		.uleb128 0x27
 1098 0068 0C       		.uleb128 0xc
 1099 0069 11       		.uleb128 0x11
 1100 006a 01       		.uleb128 0x1
 1101 006b 12       		.uleb128 0x12
 1102 006c 01       		.uleb128 0x1
 1103 006d 40       		.uleb128 0x40
 1104 006e 06       		.uleb128 0x6
 1105 006f 9642     		.uleb128 0x2116
 1106 0071 0C       		.uleb128 0xc
 1107 0072 01       		.uleb128 0x1
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 30


 1108 0073 13       		.uleb128 0x13
 1109 0074 00       		.byte	0
 1110 0075 00       		.byte	0
 1111 0076 0A       		.uleb128 0xa
 1112 0077 34       		.uleb128 0x34
 1113 0078 00       		.byte	0
 1114 0079 03       		.uleb128 0x3
 1115 007a 0E       		.uleb128 0xe
 1116 007b 3A       		.uleb128 0x3a
 1117 007c 0B       		.uleb128 0xb
 1118 007d 3B       		.uleb128 0x3b
 1119 007e 0B       		.uleb128 0xb
 1120 007f 49       		.uleb128 0x49
 1121 0080 13       		.uleb128 0x13
 1122 0081 02       		.uleb128 0x2
 1123 0082 0A       		.uleb128 0xa
 1124 0083 00       		.byte	0
 1125 0084 00       		.byte	0
 1126 0085 0B       		.uleb128 0xb
 1127 0086 34       		.uleb128 0x34
 1128 0087 00       		.byte	0
 1129 0088 03       		.uleb128 0x3
 1130 0089 0E       		.uleb128 0xe
 1131 008a 3A       		.uleb128 0x3a
 1132 008b 0B       		.uleb128 0xb
 1133 008c 3B       		.uleb128 0x3b
 1134 008d 0B       		.uleb128 0xb
 1135 008e 49       		.uleb128 0x49
 1136 008f 13       		.uleb128 0x13
 1137 0090 3F       		.uleb128 0x3f
 1138 0091 0C       		.uleb128 0xc
 1139 0092 3C       		.uleb128 0x3c
 1140 0093 0C       		.uleb128 0xc
 1141 0094 00       		.byte	0
 1142 0095 00       		.byte	0
 1143 0096 00       		.byte	0
 1144              		.section	.debug_loc,"",%progbits
 1145              	.Ldebug_loc0:
 1146              	.LLST0:
 1147 0000 00000000 		.4byte	.LFB0
 1148 0004 02000000 		.4byte	.LCFI0
 1149 0008 0200     		.2byte	0x2
 1150 000a 7D       		.byte	0x7d
 1151 000b 00       		.sleb128 0
 1152 000c 02000000 		.4byte	.LCFI0
 1153 0010 04000000 		.4byte	.LCFI1
 1154 0014 0200     		.2byte	0x2
 1155 0016 7D       		.byte	0x7d
 1156 0017 08       		.sleb128 8
 1157 0018 04000000 		.4byte	.LCFI1
 1158 001c 06000000 		.4byte	.LCFI2
 1159 0020 0200     		.2byte	0x2
 1160 0022 7D       		.byte	0x7d
 1161 0023 28       		.sleb128 40
 1162 0024 06000000 		.4byte	.LCFI2
 1163 0028 A0040000 		.4byte	.LFE0
 1164 002c 0200     		.2byte	0x2
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 31


 1165 002e 77       		.byte	0x77
 1166 002f 28       		.sleb128 40
 1167 0030 00000000 		.4byte	0
 1168 0034 00000000 		.4byte	0
 1169              		.section	.debug_aranges,"",%progbits
 1170 0000 1C000000 		.4byte	0x1c
 1171 0004 0200     		.2byte	0x2
 1172 0006 00000000 		.4byte	.Ldebug_info0
 1173 000a 04       		.byte	0x4
 1174 000b 00       		.byte	0
 1175 000c 0000     		.2byte	0
 1176 000e 0000     		.2byte	0
 1177 0010 00000000 		.4byte	.LFB0
 1178 0014 A0040000 		.4byte	.LFE0-.LFB0
 1179 0018 00000000 		.4byte	0
 1180 001c 00000000 		.4byte	0
 1181              		.section	.debug_ranges,"",%progbits
 1182              	.Ldebug_ranges0:
 1183 0000 00000000 		.4byte	.LFB0
 1184 0004 A0040000 		.4byte	.LFE0
 1185 0008 00000000 		.4byte	0
 1186 000c 00000000 		.4byte	0
 1187              		.section	.debug_line,"",%progbits
 1188              	.Ldebug_line0:
 1189 0000 3B010000 		.section	.debug_str,"MS",%progbits,1
 1189      02007200 
 1189      00000201 
 1189      FB0E0D00 
 1189      01010101 
 1190              	.LASF15:
 1191 0000 72656733 		.ascii	"reg32\000"
 1191      3200
 1192              	.LASF3:
 1193 0006 73686F72 		.ascii	"short unsigned int\000"
 1193      7420756E 
 1193      7369676E 
 1193      65642069 
 1193      6E7400
 1194              	.LASF21:
 1195 0019 656E6454 		.ascii	"endTransfer\000"
 1195      72616E73 
 1195      66657200 
 1196              	.LASF24:
 1197 0025 6C6F6349 		.ascii	"locIntrCause\000"
 1197      6E747243 
 1197      61757365 
 1197      00
 1198              	.LASF12:
 1199 0032 666C6F61 		.ascii	"float\000"
 1199      7400
 1200              	.LASF19:
 1201 0038 6C6F6349 		.ascii	"locIndex\000"
 1201      6E646578 
 1201      00
 1202              	.LASF1:
 1203 0041 756E7369 		.ascii	"unsigned char\000"
 1203      676E6564 
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 32


 1203      20636861 
 1203      7200
 1204              	.LASF26:
 1205 004f 5343425F 		.ascii	"SCB_1_customIntrHandler\000"
 1205      315F6375 
 1205      73746F6D 
 1205      496E7472 
 1205      48616E64 
 1206              	.LASF5:
 1207 0067 6C6F6E67 		.ascii	"long unsigned int\000"
 1207      20756E73 
 1207      69676E65 
 1207      6420696E 
 1207      7400
 1208              	.LASF9:
 1209 0079 75696E74 		.ascii	"uint8\000"
 1209      3800
 1210              	.LASF36:
 1211 007f 433A5C55 		.ascii	"C:\\Users\\Miriam\\Documents\\PSoC Creator\\USB-UAR"
 1211      73657273 
 1211      5C4D6972 
 1211      69616D5C 
 1211      446F6375 
 1212 00ad 545C5553 		.ascii	"T\\USB-UART.cydsn\000"
 1212      422D5541 
 1212      52542E63 
 1212      7964736E 
 1212      00
 1213              	.LASF35:
 1214 00be 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\SCB_1_EZI2C_INT.c\000"
 1214      6E657261 
 1214      7465645F 
 1214      536F7572 
 1214      63655C50 
 1215              	.LASF13:
 1216 00e9 646F7562 		.ascii	"double\000"
 1216      6C6500
 1217              	.LASF27:
 1218 00f0 5343425F 		.ascii	"SCB_1_curStatus\000"
 1218      315F6375 
 1218      72537461 
 1218      74757300 
 1219              	.LASF10:
 1220 0100 75696E74 		.ascii	"uint16\000"
 1220      313600
 1221              	.LASF11:
 1222 0107 75696E74 		.ascii	"uint32\000"
 1222      333200
 1223              	.LASF29:
 1224 010e 5343425F 		.ascii	"SCB_1_dataBuffer1\000"
 1224      315F6461 
 1224      74614275 
 1224      66666572 
 1224      3100
 1225              	.LASF8:
 1226 0120 756E7369 		.ascii	"unsigned int\000"
 1226      676E6564 
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 33


 1226      20696E74 
 1226      00
 1227              	.LASF18:
 1228 012d 6C6F6342 		.ascii	"locBufSize\000"
 1228      75665369 
 1228      7A6500
 1229              	.LASF22:
 1230 0138 6669666F 		.ascii	"fifoIndex\000"
 1230      496E6465 
 1230      7800
 1231              	.LASF7:
 1232 0142 6C6F6E67 		.ascii	"long long unsigned int\000"
 1232      206C6F6E 
 1232      6720756E 
 1232      7369676E 
 1232      65642069 
 1233              	.LASF20:
 1234 0159 6C6F6353 		.ascii	"locStatus\000"
 1234      74617475 
 1234      7300
 1235              	.LASF16:
 1236 0163 63796973 		.ascii	"cyisraddress\000"
 1236      72616464 
 1236      72657373 
 1236      00
 1237              	.LASF17:
 1238 0170 73697A65 		.ascii	"sizetype\000"
 1238      74797065 
 1238      00
 1239              	.LASF33:
 1240 0179 5343425F 		.ascii	"SCB_1_indexBuf1\000"
 1240      315F696E 
 1240      64657842 
 1240      75663100 
 1241              	.LASF6:
 1242 0189 6C6F6E67 		.ascii	"long long int\000"
 1242      206C6F6E 
 1242      6720696E 
 1242      7400
 1243              	.LASF14:
 1244 0197 63686172 		.ascii	"char\000"
 1244      00
 1245              	.LASF28:
 1246 019c 5343425F 		.ascii	"SCB_1_fsmState\000"
 1246      315F6673 
 1246      6D537461 
 1246      746500
 1247              	.LASF25:
 1248 01ab 6C6F6349 		.ascii	"locIntrSlave\000"
 1248      6E747253 
 1248      6C617665 
 1248      00
 1249              	.LASF2:
 1250 01b8 73686F72 		.ascii	"short int\000"
 1250      7420696E 
 1250      7400
 1251              	.LASF34:
ARM GAS  C:\Users\Miriam\AppData\Local\Temp\ccMcekHK.s 			page 34


 1252 01c2 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 1252      4320342E 
 1252      372E3320 
 1252      32303133 
 1252      30333132 
 1253 01f5 616E6368 		.ascii	"anch revision 196615]\000"
 1253      20726576 
 1253      6973696F 
 1253      6E203139 
 1253      36363135 
 1254              	.LASF32:
 1255 020b 5343425F 		.ascii	"SCB_1_offsetBuf1\000"
 1255      315F6F66 
 1255      66736574 
 1255      42756631 
 1255      00
 1256              	.LASF4:
 1257 021c 6C6F6E67 		.ascii	"long int\000"
 1257      20696E74 
 1257      00
 1258              	.LASF30:
 1259 0225 5343425F 		.ascii	"SCB_1_bufSizeBuf1\000"
 1259      315F6275 
 1259      6653697A 
 1259      65427566 
 1259      3100
 1260              	.LASF0:
 1261 0237 7369676E 		.ascii	"signed char\000"
 1261      65642063 
 1261      68617200 
 1262              	.LASF23:
 1263 0243 6C6F6342 		.ascii	"locByte\000"
 1263      79746500 
 1264              	.LASF37:
 1265 024b 5343425F 		.ascii	"SCB_1_EZI2C_STRETCH_ISR\000"
 1265      315F455A 
 1265      4932435F 
 1265      53545245 
 1265      5443485F 
 1266              	.LASF31:
 1267 0263 5343425F 		.ascii	"SCB_1_protectBuf1\000"
 1267      315F7072 
 1267      6F746563 
 1267      74427566 
 1267      3100
 1268              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
